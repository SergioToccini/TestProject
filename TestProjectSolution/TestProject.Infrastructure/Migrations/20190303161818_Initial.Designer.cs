// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TestProject.Infrastructure.Database;

namespace TestProject.Infrastructure.Migrations
{
    [DbContext(typeof(DefaultContext))]
    [Migration("20190303161818_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.0-rtm-35687")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("TestProject.Domain.Entities.Logs", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Exception");

                    b.Property<string>("Level");

                    b.Property<string>("LogEvent");

                    b.Property<string>("Message");

                    b.Property<string>("MessageTemplate");

                    b.Property<string>("Properties")
                        .HasColumnType("xml");

                    b.Property<DateTimeOffset>("TimeStamp");

                    b.HasKey("Id");

                    b.ToTable("Logs");
                });

            modelBuilder.Entity("TestProject.Entities.Country", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("TestProject.Entities.Stock", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("BackstoreAmount");

                    b.Property<int>("FrontstoreAmount");

                    b.Property<double>("OnFloorAvailability");

                    b.Property<int>("ShoppingWindowAmount");

                    b.Property<double>("StockAccuracy");

                    b.Property<int>("StockMeanAgeInDays");

                    b.HasKey("Id");

                    b.ToTable("Stocks");
                });

            modelBuilder.Entity("TestProject.Entities.Store", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Category");

                    b.Property<Guid>("CountryId");

                    b.Property<string>("Email");

                    b.Property<string>("Name");

                    b.Property<Guid>("StockId");

                    b.Property<Guid>("StoreManagerId");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("StockId")
                        .IsUnique();

                    b.HasIndex("StoreManagerId")
                        .IsUnique();

                    b.ToTable("Stores");
                });

            modelBuilder.Entity("TestProject.Entities.StoreManager", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Email");

                    b.Property<string>("FirstName");

                    b.Property<string>("LastName");

                    b.HasKey("Id");

                    b.ToTable("StoreManagers");
                });

            modelBuilder.Entity("TestProject.Entities.Store", b =>
                {
                    b.HasOne("TestProject.Entities.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("TestProject.Entities.Stock", "Stock")
                        .WithOne()
                        .HasForeignKey("TestProject.Entities.Store", "StockId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("TestProject.Entities.StoreManager", "StoreManager")
                        .WithOne()
                        .HasForeignKey("TestProject.Entities.Store", "StoreManagerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
